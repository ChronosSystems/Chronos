# We need to manually define dependencies for boot image.
# TODO: Make a better way to configure this than editing a python data
# structure.
Import('KERNEL_DIR')
Import('ARCH_DIR')
Import('arch_env')
Import('REAL_CURDIR')

BOOT_DEPS = {
        'boot-stage1': {None:[]},
        'boot-stage2': { 
            ARCH_DIR: [
                'stdlock',
                'vm/asm',
                'vm/pgdir',
                'vm/vm_alloc',
                'vm/vm_boot',
                'drivers/serial',
                'drivers/ata',
                'drivers/pic',
                'x86/asm',
                'cpu'
                ],
            KERNEL_DIR:[
                'drivers/diskio',
                'drivers/ext2',
                'cache/cache',
                'cache/diskcache',
                'cache/cacheman',
                'stdlock',
                'file',
                'stdlib'
                ],
            },
        'multiboot':{
            REAL_CURDIR():[
                'multiboot/multiboot',
                'multiboot/multiboot_header'
                ]
            }
        }

# TODO: Make environments for each boot image..

#TODO: Refactor.
def get_file_dependencies(boot_stage):

    # Build each boot sector in it's own build directory.
    VariantDir(boot_stage, REAL_CURDIR(), duplicate=0)

    for dir_, depslist in BOOT_DEPS[boot_stage].items():
        for depfile in depslist:
            #TODO: Use/make a script function to do this search..
            files = Glob(Join_path('#'+dir_, depfile+'.[c|S]'))

            if files is not None:
                for file_ in files:
                    boot_env.Object(boot_object_name(stage,depfile), file_)

def boot_object_name(stage, file_):
    return Join_path(stage,file_)


for stage in BOOT_DEPS: 
    boot_env = arch_env.Clone()
    objs = get_file_dependencies(stage)
