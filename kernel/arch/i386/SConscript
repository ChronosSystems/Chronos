from SCons.Script import *
from mkvect import generate_idt

Import('GlobalContext')

RELOCATE_FLAGS = [
        '-m elf_i386', 
        '-r'
        ] # Wot r these

ARCH_INCLUDE_PATHS = ['include']
ARCH_IGNORE_PATHS = ['^boot$']
ARCH_GCC_SUFFIX = ['.c','.S']
SUBBUILDS = ['boot']

TRAP_IDT_FILE = Join_path(Path(CURDIR()), 'trap', 'idt.S')

SIGN_TOOL = [Join_path(GlobalContext.REAL_CURDIR(),'tools','bin','boot-sign')]
MKVECT_TOOL= [Join_path(GlobalContext.REAL_CURDIR(),'tools','bin','mkvect')]

def build_arch_env():
    arch_env = GlobalContext.Environments['kernel_env'].Clone()

    arch_env.Append(CPPPATH=ARCH_INCLUDE_PATHS, SIGN_TOOL=SIGN_TOOL)

    return arch_env

def build_arch_objects(arch_env):
    sources = Get_sources_recursive(
            CURDIR(), 
            suffixes=ARCH_GCC_SUFFIX,
            blacklist=ARCH_IGNORE_PATHS
            )
    return arch_env.Object(sources)

ARCH_INCLUDE_PATHS = Build_include_paths(GlobalContext.REAL_CURDIR, ARCH_INCLUDE_PATHS)

arch_env = build_arch_env()

# Generate the trap idt table.
arch_env.Command(source=None, target=TRAP_IDT_FILE, action=generate_idt)

# Attach the ARCH_INCLUDE_PATHS to the kernel environment since it will need
# arch headers.
GlobalContext.Environments['kernel_env'].Append(CPPPATH=ARCH_INCLUDE_PATHS)
GlobalContext.ARCH_INCLUDE_PATHS = ARCH_INCLUDE_PATHS

GlobalContext.Environments['arch_env'] = arch_env

build_arch_objects(arch_env)

for subbuild in SUBBUILDS:
    GlobalContext.REAL_CURDIR = lambda : Join_path(GlobalContext.ARCH_DIR, subbuild)
    ARCH_LIBS = SConscript(Join_path(subbuild,'SConscript'), duplicate=0)
