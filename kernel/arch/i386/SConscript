from SCons.Script import *

Import('kernel_env')
Import('REAL_CURDIR')
Import('KERNEL_DIR')

RELOCATE_FLAGS = [
        '-m elf_i386', 
        '-r'
        ] # Wot r these

ARCH_INCLUDE_PATHS = ['include']
ARCH_IGNORE_PATHS = ['^boot$']
ARCH_GCC_SUFFIX = ['.c']
SUBBUILDS = ['boot']
SIGN_TOOL = [Join_path(REAL_CURDIR(),'tools','bin','boot-sign')]

def build_arch_env():
    arch_env = kernel_env.Clone()

    arch_env.Append(CPPPATH=ARCH_INCLUDE_PATHS, SIGN_TOOL=SIGN_TOOL)

    return arch_env

def build_arch_objects(arch_env):
    sources = Get_sources_recursive(
            CURDIR(), 
            suffixes=ARCH_GCC_SUFFIX,
            blacklist=ARCH_IGNORE_PATHS
            )
    return arch_env.Object(sources)

ARCH_INCLUDE_PATHS = Build_include_paths(REAL_CURDIR, ARCH_INCLUDE_PATHS)

arch_env = build_arch_env()

Export('arch_env')

build_arch_objects(arch_env)
ARCH_DIR = REAL_CURDIR()
Export('ARCH_DIR')
Export('KERNEL_DIR')

for subbuild in SUBBUILDS:
    REAL_CURDIR = lambda : Join_path(ARCH_DIR, subbuild)
    # FIXME:
    ARCH_LIBS = SConscript(Join_path(subbuild,'SConscript'), exports='REAL_CURDIR', duplicate=0)

Return('ARCH_INCLUDE_PATHS')
