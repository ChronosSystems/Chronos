from SCons.Script import *

Import('build_arch')
Import('cross_env')
Import('REAL_CURDIR')

KINCLUDE_PATHS = [
        'include'
        ]

KERNEL_LDFLAGS = [
        '-nostdlib', 
        '--entry=main',
        '--section-start=.text=0xFF000000'
        ]

SUBBUILDS = [Join_path('arch',build_arch)]

def create_kernel_env():
    kinclude_paths = Build_include_paths(REAL_CURDIR, KINCLUDE_PATHS)

    kernel_env = cross_env.Clone()

    kernel_env.Append(CPPPATH=kinclude_paths, LDFLAGS=KERNEL_LDFLAGS)
    #kernel_env.Append(CPPPATH=KINCLUDE_PATHS, LDFLAGS=KERNEL_LDFLAGS)

    return kernel_env

def build_kernel_objects(kernel_env):
    # Don't search arch or include for sources, we've added arch.
    dir_blacklist = ['^arch$', '^include$']

    sources = Get_sources_recursive(CURDIR(), suffixes='.c', blacklist=dir_blacklist)

    return kernel_env.Object(sources)

    # TODO: Create kernel image, etc..
    #print(dir(cross_env))
    #cross_env.Ld('chronos.o', objects)
    #cross_env.Objcopy('chronos.sym', 'chronos')

#def build_boot_objects():
#    pass

kernel_env = create_kernel_env()

Export('kernel_env')
ARCH_LIBS=None

# Build the subdirs for the kernel.
for subbuild in SUBBUILDS:
    curdir = REAL_CURDIR()
    REAL_CURDIR = lambda : Join_path(curdir, subbuild)
    # FIXME:
    ARCH_LIBS = SConscript(Join_path(subbuild,'SConscript'), exports='REAL_CURDIR', duplicate=0)
    
kernel_env.Append(CPPPATH=ARCH_LIBS)

build_kernel_objects(kernel_env)
