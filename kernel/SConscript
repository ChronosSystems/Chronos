import os

Import('build_arch')
Import('cross_env')

CURDIR = str(Dir('.'))

# TODO: Create a general helper to import to define these.
def get_folders(dir_):
    files = os.listdir(dir_)
    return filter(os.path.isdir, files)

def recursive_get_subfolders(dir_):
    return (tup[0] for tup in os.walk(dir_))

def locate_sources(dir_):
    print(dir_)
    # Check if we are using '.' since os.path.join doesn't work for it.
    if os.path.join(dir_, '*.c').endswith('*.c'):
        print(os.path.join(dir_,'*.c'))
        return Glob(os.path.join(dir_,'*.c'))
    return Glob('*.c')

kinclude_paths = ['include']
kinclude_paths = [Dir(path) for path in kinclude_paths]

cross_env.Append(CPPPATH=kinclude_paths)

subbuilds = [str(os.path.join('arch', build_arch))]
# TODO: Make a shared library so I dont have to redo this
subbuild_scripts = [str(os.path.join(subbuild, 'SConscript')) for subbuild in subbuilds]

SConscript(subbuild_scripts)

subdir_nobuild_list = ['arch', 'include']

subdirs_to_build = [folder for folder in get_folders(CURDIR) 
                    if folder not in subdir_nobuild_list]

# Add all the subfolders of subfolders.
inner_subdirs = []
for subdir in subdirs_to_build:
    subfolders = recursive_get_subfolders(subdir)
    if subfolders is not None:
        inner_subdirs.extend(subfolders)

dirs_to_build = inner_subdirs + subdirs_to_build + [CURDIR]

sources = []
for dir_ in dirs_to_build:
    dir_sources  = locate_sources(dir_)
    print(dir_)
    if dir_sources is not None:
        sources.extend(dir_sources)

cross_env.Object(sources)
