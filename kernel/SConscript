from SCons.Script import *
Import('GlobalContext')

KINCLUDE_PATHS = [
        'include'
        ]

KERNEL_LDFLAGS = [
        '-nostdlib', 
        '--entry=main',
        '--section-start=.text=0xFF000000'
        ]

KERNEL_DIR_BLACKLIST = ['^arch$', '^include$']

ARCH_DIR = Join_path('arch', GlobalContext.BUILD_ARCH)

SUBBUILDS = [ARCH_DIR]

def create_kernel_env():
    kinclude_paths = Build_include_paths(GlobalContext.REAL_CURDIR, KINCLUDE_PATHS)

    kernel_env = GlobalContext.Environments['cross_env'].Clone()

    kernel_env.Append(CPPPATH=kinclude_paths, LDFLAGS=KERNEL_LDFLAGS)

    return kernel_env

def build_kernel_objects(kernel_env):
    # Don't search arch or include for sources, we've added arch.

    sources = Get_sources_recursive(CURDIR(), suffixes='.c',
            blacklist=KERNEL_DIR_BLACKLIST)

    return kernel_env.Object(sources)

# TODO: Create kernel image, etc..

kernel_env = create_kernel_env()

# Export any variables needed globally.
GlobalContext.Environments['kernel_env'] = kernel_env
GlobalContext.KERNEL_DIR = GlobalContext.REAL_CURDIR()
GlobalContext.ARCH_DIR   = Join_path(GlobalContext.KERNEL_DIR, ARCH_DIR)

# Build the subdirs for the kernel.
for subbuild in SUBBUILDS:
    GlobalContext.REAL_CURDIR = lambda : Join_path(GlobalContext.KERNEL_DIR, subbuild)
    SConscript(Join_path(subbuild,'SConscript'), duplicate=0)
    
build_kernel_objects(kernel_env)
